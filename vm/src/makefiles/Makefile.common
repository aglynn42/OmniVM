
# This is a -*- Makefile -*-

# Standalone makefile for 'getting started' app

SRC_DIR ?= $(shell pwd)/../src
OS      ?= $(shell uname)
GTEST   ?= $(SRC_DIR)/../googletest

ifeq "$(OS)" "MACOS"
  # OS is set by Xcode to MACOS, but we rely on it being Darwin
  OS = Darwin
endif

OPTIMIZE_LEVEL ?= -O3

# add some tracking information to identify binaries later
CONFIG_FLAGS += -DGIT_REVISION_ID=$(shell git rev-parse HEAD)
CONFIG_FLAGS += -DCOMPILATION_HOSTNAME=$(shell hostname)

ifndef PLATFORM
  # fall back to Tilera as standard platform
  PLATFORM = Tilera
endif

ifndef PREHEADER
  # fall back in case it has not been defined previously
  PREHEADER=1
endif

ifeq "$(SUPPRESS_CMD_OUTPUT)" "1"
  AT = @
else
  AT =
endif


ifdef TILERA_ROOT
BIN = $(TILERA_ROOT)/bin/
endif

INCLUDES = \
    -I$(SRC_DIR)/testers \
    -I$(SRC_DIR)/externals \
    -I$(SRC_DIR)/runtime \
    -I$(SRC_DIR)/platform \
    -I$(SRC_DIR)/heap \
    -I$(SRC_DIR)/interpreter \
    -I$(SRC_DIR)/from_squeak \
    -I$(SRC_DIR)/from_squeak/Cross \
    -I$(SRC_DIR)/from_squeak/Cross/plugins \
    -I$(SRC_DIR)/from_squeak/Cross/plugins/SocketPlugin \
    -I$(SRC_DIR)/from_squeak/Cross/plugins/SoundPlugin \
    -I$(SRC_DIR)/from_squeak/Cross/plugins/FilePlugin \
    -I$(SRC_DIR)/from_squeak/Cross/plugins/RePlugin \
    -I$(SRC_DIR)/from_squeak/Cross/plugins/B3DAcceleratorPlugin \
    -I$(SRC_DIR)/from_squeak/Cross/vm \
    -I$(SRC_DIR)/from_squeak/intplugins \
    -I$(SRC_DIR)/from_squeak/intplugins/Matrix2x3Plugin \
    -I$(SRC_DIR)/from_squeak/intplugins/BitBltPlugin \
    -I$(SRC_DIR)/from_squeak/intplugins/SoundPlugin \
    -I$(SRC_DIR)/from_squeak/intplugins/LargeIntegers \
    -I$(SRC_DIR)/from_squeak/intplugins/B2DPlugin \
    -I$(SRC_DIR)/from_squeak/intplugins/FloatArrayPlugin \
    -I$(SRC_DIR)/from_squeak/intplugins/UnixOSProcessPlugin \
    -I$(SRC_DIR)/from_squeak/intplugins/MiscPrimitivePlugin \
    -I$(SRC_DIR)/from_squeak/intplugins/SocketPlugin \
    -I$(SRC_DIR)/from_squeak/unix \
    -I$(SRC_DIR)/from_squeak/unix/plugins/B3DAcceleratorPlugin \
    -I$(SRC_DIR)/from_squeak/unix/vm-display-X11 \
    -I$(SRC_DIR)/from_squeak/unix/vm-sound-null \
    -I$(SRC_DIR)/from_squeak/unix/vm-sound-custom \
    -I$(SRC_DIR)/from_squeak/unix/vm \
    -I$(SRC_DIR)/from_squeak/unix/vm-sound-MacOSX \
    -I$(SRC_DIR)/image_readers \
    -I$(SRC_DIR)/oops \
    -I$(SRC_DIR)/nonoops \
    -I$(SRC_DIR)/types \
    -I$(SRC_DIR)/objects \
    -I$(SRC_DIR)/primitives \
    -I$(SRC_DIR)/messages \
    -I$(SRC_DIR)/multichip

	
ifeq "$(PLATFORM)" "Intel"
INCLUDES += \
	-I$(SRC_DIR)/message_buffers \
	-I$(SRC_DIR)/ibm
endif


CONFIG_FLAGS += -DExtra_Preheader_Word_Experiment=$(PREHEADER) -DLSB_FIRST=1 -DROAR_VM

# removed -Winline warning for now, was not useful so far
# CONFIG_FLAGS += -Winline 
# CXX_CONFIG_FLAGS += -Winline

CFLAGS = $(INCLUDES) $(CONFIG_FLAGS) -include rvm_config.h
CXXFLAGS = -fno-rtti $(CXX_CONFIG_FLAGS)
CONLYFLAGS = -w $(CONLY_CONFIG_FLAGS)
# -I/home/ungar/renaissance/xfree86_include
LDFLAGS += $(CONFIG_FLAGS)
# -L$(X11_PATH) -L$(Xext_PATH) 
#-rpath $(X11_PATH) -rpath $(Xext_PATH)

ifeq "$(PLATFORM)" "Tilera"
  CC  = tile-cc
  CXX = tile-c++
  LD  = tile-ld
  CONLYFLAGS += -I/home/ungar/renaissance/xfree86_include -I/users/smarr/Projects/x11/include/
endif

TILE_MONITOR = $(BIN)tile-monitor

EXECUTABLE = omnivm

MONITOR_COMMON_ARGS = \
  --batch-mode \
  --mkdir /opt/test \
  --cd /opt/test \
  --upload $(EXECUTABLE) $(EXECUTABLE) \
  -- $(EXECUTABLE)

FILTER = sort

CONSOLE_FILTER = egrep -v \
  'Client requested halt|init is exiting, so halting kernel|System halted'


SQ_HEADERS = \
	squeak_adapters.h \
	SocketPlugin.h \
	FilePlugin.h \
	config.h \
	sqUnixOpenGL.h \
	B3DAcceleratorPlugin.h \
	sqOpenGLRenderer.h \
	sqVirtualMachine.h \
	SoundPlugin.h \
	sqaio.h \
	SqModule.h \
	sqNamedPrims.h \
	SqSound.h \
	SqDisplay.h \
	interp.h \
	sqConfig.h \
	sqUnixGlobals.h \
	sqPlatformSpecific.h \
	sq.h \
	sqUnixMain.h \
	sqUnixCharConv.h \
	sqMemoryAccess.h \
	sqUnixSoundDebug.h \


RVM_HEADERS = \
  multicore_object_table.inline.h \
  segmented_object_table.inline.h \
  memory_system.inline.h \
  abstract_object_heap.inline.h \
  multicore_object_heap.inline.h \
  oop.inline.h \
  chunk.inline.h \
  object.inline.h \
  externals.h \
  rvm_bitmap.h \
  printer.h \
  measurements.h \
  bytemap.h \
  error_handling.h \
  squeak_adapters.h \
  runtime_tester.h \
  rvm_config.h \
  utils.h \
  abstract_cpu_coordinate.h \
  dummy_cpu_coordinate.h \
  tile_cpu_coordinate.h \
  logical_core.h \
  headers.h \
  abstract_mark_sweep_collector.h \
  oop_closure.h \
  indirect_oop_mark_sweep_collector.h \
  abstract_object_heap.h \
  mark_sweep_collector.h \
  abstract_object_table.h \
  obsolete_indexed_primitive_table.h \
  obsolete_named_primitive_table.h \
  at_cache.h \
  interpreter_bytecodes.h \
  interpreter_primitives.h \
  method_cache.h \
  external_primitive_table.h \
  primitive_table.h \
  squeak_interpreter.h \
  abstract_primitive_table.h \
  config.h \
  tags.h \
  oop.h \
  abstract_oop.h \
  types.h \
  object.h \
  header_type.h \
  special_indices.h \
  object_indices.h \
  chunk.h \
  word_containing_object_type.h \
  roots.h \
  RVMPlugin.h \
  multicore_object_heap.h \
  multicore_object_table.h \
  segmented_object_table.h \
  dummy_object_table.h \
  memory_system.h \
  core_tracer.h \
  abstract_tracer.h \
  oop_tracer.h \
  execution_tracer.h \
  profiling_tracer.h \
  gc_debugging_tracer.h \
  performance_counters.h \
  safepoint.h \
  abstract_mutex.h \
  scheduler_mutex.h \
  semaphore_mutex.h \
  \
  message_stats.h \
  message_classes.h \
  interpreter_subset_for_control_transfer.h \
  interactions.h \
  deferred_request.h \
  message_or_ack_request.h \
  message_statics.h \
  receive_marker.h \
  \
  timeout_timer.h \
  timeout_deferral.h \
  \
  rank_set.h \
  safepoint_request_queue.h \
  gc_oop_stack.h \
  preheader.h \
  \
  abstract_os_interface.h \
  ilib_os_interface.h \
  posix_os_interface.h \
  osx_os_interface.h \
  os_interface.h \
  \
  safepoint_ability.h \
  my_rank.h \
  process_field_locator.h\
  abstract_message.h \
  message_templates.h \
  \
  abstract_message_queue.h \
  shared_memory_message_queue.h \
  shared_memory_message_queue_per_sender.h \
  ilib_message_queue.h \
  tilera_chip_to_chip_message_queue.h \
  host_pci_info.h \
  abstract_zero_copy_command_queue_endpoint.h \
  chip_to_chip_direct_to_hypervisor_zero_copy_endpoint.h \
  chip_to_chip_direct_to_hypervisor_zero_copy_sender.h \
  chip_to_chip_direct_to_hypervisor_zero_copy_receiver.h \
  chip_to_chip_zero_copy_command_queue_endpoint.h \
  chip_to_chip_zero_copy_command_sender.h \
  chip_to_chip_zero_copy_command_receiver.h \
  abstract_memory_semantics.h \
  process_memory_semantics.h \
  thread_memory_semantics.h \
  \
  debug_store_checks.h \
  debug_helper.h \
  tracked_ptr.h \
  tracked_ptr_registry.h \
  \
  ostdomain.h \
  ostdomain_selector_indices.h \
  object_field_accessor.h \
  

ifeq "$(PLATFORM)" "Intel"
RVM_HEADERS += \
  buffered_channel.h \
  buffered_channel_debug.h \

endif

# default target
all: $(EXECUTABLE)

info:
	@echo Platform: $(PLATFORM)
	@echo SRC_DIR: $(SRC_DIR)
	@$(CC) --version
	@$(CXX) --version


#Hack to satisfy make, to force override buildin rules, even if its not able to find all prerequisites.
$(RVM_HEADERS):
	@echo The following RVM_HEADER files have not been found and cause unnecessary rebuilds: $@

#Hack to satisfy make, to force override buildin rules, even if its not able to find all prerequisites.
$(SQ_HEADERS):

TTY=$(shell test -t 0 && echo "true")
ifeq "$(TTY)" "true"
	START_BOLD=$(shell tput bold)
	STOP_BOLD=$(shell tput sgr0)
endif
PRINT_COMPILATION_INFO=@echo "$(START_BOLD)Compiling $(notdir $<)$(STOP_BOLD)"

#the space after %.i is necessary, otherwise the buildin will not be canceled properly
%.i : %.c $(SQ_HEADERS)
	$(PRINT_COMPILATION_INFO)
	$(AT)$(CC) $(CFLAGS) $(CONLYFLAGS) -E  $< -o $@

%.o : %.c $(SQ_HEADERS) Makefile
	$(PRINT_COMPILATION_INFO)
	$(AT)$(CC) $(CFLAGS) $(CONLYFLAGS) $(OPTIMIZE_LEVEL) -c $< -o $@

%.i : %.cpp  $(RVM_HEADERS)
	$(PRINT_COMPILATION_INFO)
	$(AT)$(CXX) $(CFLAGS) $(CXXFLAGS) -E $< -o $@

%.o : %.cpp $(RVM_HEADERS) Makefile 
	$(PRINT_COMPILATION_INFO)
	$(AT)$(CXX) $(CFLAGS) $(CXXFLAGS) $(OPTIMIZE_LEVEL) -c $< -o $@


vpath %.c $(SRC_DIR)/from_squeak
vpath %.c $(SRC_DIR)/from_squeak/Cross
vpath %.c $(SRC_DIR)/from_squeak/Cross/plugins
vpath %.c $(SRC_DIR)/from_squeak/Cross/plugins/B3DAcceleratorPlugin
vpath %.c $(SRC_DIR)/from_squeak/Cross/plugins/FilePlugin
vpath %.c $(SRC_DIR)/from_squeak/Cross/plugins/RePlugin
vpath %.c $(SRC_DIR)/from_squeak/Cross/plugins/SocketPlugin
vpath %.c $(SRC_DIR)/from_squeak/Cross/vm
vpath %.c $(SRC_DIR)/from_squeak/intplugins
vpath %.c $(SRC_DIR)/from_squeak/intplugins/B2DPlugin
vpath %.c $(SRC_DIR)/from_squeak/intplugins/BitBltPlugin
vpath %.c $(SRC_DIR)/from_squeak/intplugins/FloatArrayPlugin
vpath %.c $(SRC_DIR)/from_squeak/intplugins/LargeIntegers
vpath %.c $(SRC_DIR)/from_squeak/intplugins/Matrix2x3Plugin
vpath %.c $(SRC_DIR)/from_squeak/intplugins/MiscPrimitivePlugin
vpath %.c $(SRC_DIR)/from_squeak/intplugins/SoundPlugin
vpath %.c $(SRC_DIR)/from_squeak/intplugins/UnixOSProcessPlugin
vpath %.c $(SRC_DIR)/from_squeak/intplugins/SocketPlugin
vpath %.c $(SRC_DIR)/from_squeak/unix
vpath %.c $(SRC_DIR)/from_squeak/unix/plugins/FilePlugin
vpath %.c $(SRC_DIR)/from_squeak/unix/plugins/SocketPlugin
vpath %.c $(SRC_DIR)/from_squeak/unix/plugins/SoundPlugin
vpath %.c $(SRC_DIR)/from_squeak/unix/vm
vpath %.c $(SRC_DIR)/from_squeak/unix/vm-display-X11
vpath %.c $(SRC_DIR)/from_squeak/unix/vm-sound-custom
vpath %.c $(SRC_DIR)/from_squeak/unix/vm-sound-MacOSX
vpath %.c $(SRC_DIR)/from_squeak/unix/vm-sound-null


vpath %.h $(SRC_DIR)/from_squeak
vpath %.h $(SRC_DIR)/from_squeak/Cross
vpath %.h $(SRC_DIR)/from_squeak/Cross/plugins
vpath %.h $(SRC_DIR)/from_squeak/Cross/plugins/B3DAcceleratorPlugin
vpath %.h $(SRC_DIR)/from_squeak/Cross/plugins/FilePlugin
vpath %.h $(SRC_DIR)/from_squeak/Cross/plugins/RePlugin
vpath %.h $(SRC_DIR)/from_squeak/Cross/plugins/SocketPlugin
vpath %.h $(SRC_DIR)/from_squeak/Cross/plugins/SoundPlugin
vpath %.h $(SRC_DIR)/from_squeak/Cross/vm
vpath %.h $(SRC_DIR)/from_squeak/intplugins
vpath %.h $(SRC_DIR)/from_squeak/intplugins/B2DPlugin
vpath %.h $(SRC_DIR)/from_squeak/intplugins/BitBltPlugin
vpath %.h $(SRC_DIR)/from_squeak/intplugins/FloatArrayPlugin
vpath %.h $(SRC_DIR)/from_squeak/intplugins/LargeIntegers
vpath %.h $(SRC_DIR)/from_squeak/intplugins/Matrix2x3Plugin
vpath %.h $(SRC_DIR)/from_squeak/intplugins/MiscPrimitivePlugin
vpath %.h $(SRC_DIR)/from_squeak/intplugins/SoundPlugin
vpath %.h $(SRC_DIR)/from_squeak/intplugins/UnixOSProcessPlugin
vpath %.h $(SRC_DIR)/from_squeak/intplugins/SocketPlugin
vpath %.h $(SRC_DIR)/from_squeak/unix
vpath %.h $(SRC_DIR)/from_squeak/unix/plugins/B3DAcceleratorPlugin
vpath %.h $(SRC_DIR)/from_squeak/unix/vm
vpath %.h $(SRC_DIR)/from_squeak/unix/vm-display-X11
vpath %.h $(SRC_DIR)/from_squeak/unix/vm-sound-custom
vpath %.h $(SRC_DIR)/from_squeak/unix/vm-sound-MacOSX
vpath %.h $(SRC_DIR)/from_squeak/unix/vm-sound-null

vpath %.cpp $(SRC_DIR)/externals
vpath %.cpp $(SRC_DIR)/heap
vpath %.cpp $(SRC_DIR)/image_readers
vpath %.cpp $(SRC_DIR)/interpreter
vpath %.cpp $(SRC_DIR)/nonoops
vpath %.cpp $(SRC_DIR)/objects
vpath %.cpp $(SRC_DIR)/oops
vpath %.cpp $(SRC_DIR)/runtime
vpath %.cpp $(SRC_DIR)/platform
vpath %.cpp $(SRC_DIR)/testers
vpath %.cpp $(SRC_DIR)/types
vpath %.cpp $(SRC_DIR)/primitives
vpath %.cpp $(SRC_DIR)/messages
vpath %.cpp $(SRC_DIR)/multichip


vpath %.h $(SRC_DIR)/externals
vpath %.h $(SRC_DIR)/heap
vpath %.h $(SRC_DIR)/image_readers
vpath %.h $(SRC_DIR)/interpreter
vpath %.h $(SRC_DIR)/nonoops
vpath %.h $(SRC_DIR)/objects
vpath %.h $(SRC_DIR)/oops
vpath %.h $(SRC_DIR)/runtime
vpath %.h $(SRC_DIR)/platform
vpath %.h $(SRC_DIR)/testers
vpath %.h $(SRC_DIR)/types
vpath %.h $(SRC_DIR)/primitives
vpath %.h $(SRC_DIR)/messages
vpath %.h $(SRC_DIR)/multichip

ifeq "$(PLATFORM)" "Intel"
vpath %.cpp $(SRC_DIR)/message_buffers

vpath %.h $(SRC_DIR)/message_buffers
endif

#        UnixOSProcessPlugin.o 

OBJS = \
  abstract_mark_sweep_collector.o \
  abstract_object_heap.o \
  aio.o \
  at_cache.o \
  B2DPlugin.o \
  BitBltPlugin.o \
  bytemap.o \
  core_tracer.o \
  abstract_tracer.o \
  oop_tracer.o \
  error_handling.o \
  externals.o \
  FilePlugin.o \
  FloatArrayPlugin.o \
  interpreter_bytecodes.o \
  interpreter_enforced_bytecodes.o \
  interpreter_primitives.o \
  LargeIntegers.o \
  Matrix2x3Plugin.o \
  measurements.o \
  memory_system.o \
  method_cache.o \
  MiscPrimitivePlugin.o \
  multicore_object_heap.o \
  multicore_object_table.o \
  dummy_object_table.o \
  segmented_object_table.o \
  object.o \
  header_type.o \
  obsolete_indexed_primitive_table.o \
  obsolete_named_primitive_table.o \
  oop.o \
  primitive_table.o \
  printer.o \
  roots.o \
  rvm_bitmap.o \
  rvm_config.o \
  RVMPlugin.o \
  SoundPlugin.o \
  SocketPlugin.o \
  sqFilePluginBasicPrims.o \
  sqNamedPrims.o \
  sqUnixCharConv.o \
  sqUnixExternalPrims.o \
  sqUnixMain.o \
  sqUnixX11.o \
  sqVirtualMachine.o \
  squeak_adapters.o \
  squeak_image_reader.o \
  squeak_interpreter.o \
  sqUnixFile.o \
  sqUnixSound.o \
  sqUnixSoundNull.o \
  sqUnixSocket.o \
  utils.o \
  execution_tracer.o \
  profiling_tracer.o \
  gc_debugging_tracer.o \
  performance_counters.o \
  safepoint.o \
  abstract_mutex.o \
  scheduler_mutex.o \
  semaphore_mutex.o \
  \
  message_stats.o \
  message_classes.o \
  interpreter_subset_for_control_transfer.o \
  interactions.o \
  timeout_timer.o \
  timeout_deferral.o \
  \
  rank_set.o \
  safepoint_request_queue.o \
  \
  my_rank.o \
  safepoint_ability.o \
  process_field_locator.o \
  abstract_message.o \
  deferred_request.o \
  message_or_ack_request.o \
  \
  message_statics.o \
  receive_marker.o \
  \
  abstract_os_interface.o \
  logical_core.o \
  debug_helper.o \
  \
  OmniPlugin.o \
  ostdomain.o \
  object_field_accessor.o \



ifeq "$(PLATFORM)" "Intel"
OBJS += \
  synced_queue.o \
  buffered_channel.o \
  posix_os_interface.o \
  shared_memory_message_queue.o \
  shared_memory_message_queue_per_sender.o \
  thread_memory_semantics.o \
  dummy_cpu_coordinate.o \

else
OBJS += \
  ilib_os_interface.o \
  ilib_message_queue.o \
  tilera_chip_to_chip_message_queue.o \
  host_pci_info.o \
  abstract_zero_copy_command_queue_endpoint.o \
  chip_to_chip_direct_to_hypervisor_zero_copy_endpoint.o \
  chip_to_chip_direct_to_hypervisor_zero_copy_sender.o \
  chip_to_chip_direct_to_hypervisor_zero_copy_receiver.o \
  chip_to_chip_zero_copy_command_queue_endpoint.o \
  chip_to_chip_zero_copy_command_sender.o \
  chip_to_chip_zero_copy_command_receiver.o \
  process_memory_semantics.o \
  tile_cpu_coordinate.o \

endif

ifeq "$(OS)" "Darwin"
OBJS += osx_os_interface.o \

endif


X11_PATH ?= /home/ungar/renaissance/xfree86/xc/lib/X11
Xext_PATH ?= /home/ungar/renaissance/xfree86/xc/lib/Xext

ifeq "$(PLATFORM)" "Tilera"
  LIBS_LINKING = -rpath $(X11_PATH) $(X11_PATH)/libX11.a  $(Xext_PATH)/libXext.a
  TILERA_LIBS = -lilib -ltmc -ldl -ltilepci
  LDFLAGS += -static
else
  # that should be dynamically on OS X and also standard linux, as far as I know
  LIBS_LINKING = -L$(X11_PATH) -L$(Xext_PATH)
endif


$(EXECUTABLE): $(OBJS) main.o
	$(CXX) $(LDFLAGS) $(OBJS) main.o -lm $(TILERA_LIBS) $(LIBS_LINKING) -o $@

# Test Related targets, we use the googletest framework for unit tests

GTEST_INCLUDES = -I$(GTEST)/include -I$(GTEST)

libgtest.a:
	$(CXX) $(GTEST_INCLUDES) -m32 -c $(GTEST)/src/gtest-all.cc
	$(AR) -rv libgtest.a gtest-all.o
	ranlib libgtest.a

# REM: this will build the object files inside the test folder
#      this allows us to use the same names for tests and implementation files
TESTMAIN_WITHOUT_ROARVM := $(SRC_DIR)/tests/main_without_roarvm.cpp
TEST_SRC  := $(filter-out $(TESTMAIN_WITHOUT_ROARVM),$(wildcard $(SRC_DIR)/tests/*.cpp))
TEST_H    := $(wildcard $(SRC_DIR)/tests/*.h)
TEST_OBJS := $(TEST_SRC:.cpp=.o) $(OBJS)

$(TEST_OBJS) : $(TEST_H)

rvm-test : CONFIG_FLAGS+=-g3 -DDebugging=1 -Dcheck_assertions=1 -Dcheck_many_assertions=1 -DUNIT_TESTING
rvm-test : CXXFLAGS:=$(CXX_CONFIG_FLAGS)
rvm-test : INCLUDES+=$(GTEST_INCLUDES)
rvm-test: libgtest.a $(TEST_OBJS) $(TEST_H)
	$(CXX) $(LDFLAGS) $(TEST_OBJS) gtest-all.o -lm -lpthread  $(TILERA_LIBS) -L. $(LIBS_LINKING) -o $@

test: rvm-test
	$(AT)./rvm-test

test-cov : LDFLAGS+=-lgcov -coverage
test-cov : CONFIG_FLAGS+=-fprofile-arcs -ftest-coverage 
test-cov: test
	gcov $(TEST_SRC) $(RVM_HEADERS) $(OBJS:.o=.cpp)
	lcov --directory . --capture --output-file rvm-gcov.info
	genhtml --output-directory rvm-cov rvm-gcov.info

partial-cov : LDFLAGS+=-lgcov -coverage
partial-cov : CONFIG_FLAGS:=-fprofile-arcs -ftest-coverage -DWITHOUT_ROAR_VM -DUNIT_TESTING $(filter-out -DROAR_VM,$(CONFIG_FLAGS))
partial-cov : CXXFLAGS:=$(CXX_CONFIG_FLAGS)
partial-cov : INCLUDES+=$(GTEST_INCLUDES)
partial-cov: $(SRC_DIR)/tests/interprocess_allocator.o $(SRC_DIR)/tests/circular_buffer.o $(SRC_DIR)/tests/main_without_roarvm.o libgtest.a
	$(AT)echo Coverage generation is currently only supported by GNU GCC not LLVM GCC
	$(CXX) $(LDFLAGS) $(SRC_DIR)/tests/interprocess_allocator.o $(SRC_DIR)/tests/circular_buffer.o $(SRC_DIR)/tests/main_without_roarvm.o gtest-all.o -lm -lpthread  $(TILERA_LIBS) -L. $(LIBS_LINKING) -o ./$@
	$(AT)./$@
	gcov -o $(SRC_DIR)/tests/ interprocess_allocator.cpp interprocess_allocator.h circular_buffer.cpp circular_buffer.h
	lcov --directory $(SRC_DIR)/tests/ --capture --output-file rvm-gcov.info
	genhtml --output-directory rvm-cov rvm-gcov.info


test-image: $(EXECUTABLE)
	$(AT)./$(EXECUTABLE) -headless ../../../images/benchmarks/pharo-omni.image SubunitRunner runPackage: OmniVMNoOpt
	$(AT)./$(EXECUTABLE) -headless ../../../images/benchmarks/pharo-omni.image SubunitRunner runPackage: OmniST-Tests-Core
	$(AT)./$(EXECUTABLE) -headless ../../../images/benchmarks/pharo-omni.image SubunitRunner runPackage: OmniST-Tests-Languages
	$(AT)./$(EXECUTABLE) -headless ../../../images/benchmarks/pharo-omni.image SubunitRunner runPackage: ClojureST
	$(AT)./$(EXECUTABLE) -headless ../../../images/benchmarks/pharo-omni.image SubunitRunner runPackage: CL-Benchmarks
	$(AT)./$(EXECUTABLE) -headless ../../../images/benchmarks/pharo-omni.image SubunitRunner runPackage: AmbientTalkST-Benchmarks
	$(AT)./$(EXECUTABLE) -headless ../../../images/benchmarks/pharo-omni.image SubunitRunner runPackage: OmniST-Benchmarks
	$(AT)./$(EXECUTABLE) -headless ../../../images/benchmarks/pharo-omni.image SubunitRunner runPackage: LRSTM-Benchmarks

clean:
	rm -f *.o $(EXECUTABLE) rvm-test libgtest.a $(TEST_OBJS)
	rm -f *.gcno *.gcda *.gcov rvm-gcov.info $(SRC_DIR)/tests/*.gcno $(SRC_DIR)/tests/*.gcda $(SRC_DIR)/tests/*.gcov
	rm -Rf partial-cov rvm-cov

install: $(EXECUTABLE)
	install $(EXECUTABLE) /usr/local/bin

.PHONY: all clean run test run_pci test_pci info
